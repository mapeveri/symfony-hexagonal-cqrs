# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    _instanceof:
        App\Shared\Domain\Bus\Event\EventHandler:
            tags:
                - { name: messenger.message_handler, bus: event.bus }
        App\Shared\Domain\Bus\Command\CommandHandler:
            tags:
                - { name: messenger.message_handler, bus: command.bus }
        App\Shared\Domain\Bus\Query\QueryHandler:
            tags:
                - { name: messenger.message_handler, bus: query.bus }

    App\Shared\Infrastructure\Bus\Event\RabbitMqConnection:
        arguments:
            - host: '%env(RABBITMQ_HOST)%'
              port: '%env(RABBITMQ_PORT)%'
              vhost: '%env(RABBITMQ_MOOC_VHOST)%'
              login: '%env(RABBITMQ_LOGIN)%'
              password: '%env(RABBITMQ_PASSWORD)%'
              read_timeout: 2
              write_timeout: 2
              connect_timeout: 5

    App\Shared\Infrastructure\Persistence\Doctrine\Repository\DoctrineRepository:
        class: App\Shared\Infrastructure\Persistence\Doctrine\Repository\DoctrineRepository
        arguments: [
            '@doctrine.orm.default_entity_manager'
        ]
        abstract:  true

    App\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchClient:
        factory: '@App\Shared\Infrastructure\Persistence\Elasticsearch\ElasticsearchClientFactory'
        arguments:
            - '%env(ELASTICSEARCH_HOST)%'
            - '%env(ELASTICSEARCH_INDEX_PREFIX)%'
            - '%kernel.project_dir%/../etc/databases/magazine'
            - '%env(APP_ENV)%'
        public: true

    App\Magazine\Category\Infrastructure\Persistence\Doctrine\Repository\DoctrineCategoryRepository:
        parent: App\Shared\Infrastructure\Persistence\Doctrine\Repository\DoctrineRepository

    App\Magazine\User\Infrastructure\Persistence\Doctrine\Repository\DoctrineUserRepository:
        parent: App\Shared\Infrastructure\Persistence\Doctrine\Repository\DoctrineRepository

    App\Magazine\Post\Infrastructure\Persistence\Doctrine\Repository\DoctrinePostRepository:
        parent: App\Shared\Infrastructure\Persistence\Doctrine\Repository\DoctrineRepository

    App\Magazine\Category\Domain\CategoryRepository: '@App\Magazine\Category\Infrastructure\Persistence\Doctrine\Repository\DoctrineCategoryRepository'
    App\Magazine\User\Domain\UserRepository: '@App\Magazine\User\Infrastructure\Persistence\Doctrine\Repository\DoctrineUserRepository'
    App\Magazine\ser\Domain\GeneratePassword: '@App\Magazine\User\Infrastructure\Symfony\Security\EncodedPassword'
    App\Magazine\Post\Domain\PostRepository: '@App\Magazine\Post\Infrastructure\Persistence\Doctrine\Repository\DoctrinePostRepository'
    App\Magazine\Portal\Domain\PortalRepository: '@App\Magazine\Portal\Infrastructure\Persistence\Elasticsearch\Repository\ElasticsearchPortalRepository'

    App\Magazine\Post\Infrastructure\Notification\Post\NewPostEmailAdmin:
        class: App\Magazine\Post\Infrastructure\Notification\Post\NewPostEmailAdmin
        arguments:
            - '%env(EMAIL_ADMIN)%'
            - '%env(EMAIL_FROM)%'

    App\Magazine\Post\Domain\SendEmailAdmin: '@App\Magazine\Post\Infrastructure\Notification\Post\NewPostEmailAdmin'

    # Commands
    app_create_user:
        class: App\Magazine\User\Infrastructure\Symfony\Console\CreateUserCommand
        tags:
            -  { name: console.command }